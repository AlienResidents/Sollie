#!/bin/bash
#
# This script is used to check for the rules file.  Strip the rules file of all
# blank lines, and compute a checksum.  The output that stripped file into a
# rules.ok file in the same directory as the rules file.
#

USAGE="
$0 <rules file>
"

function cleanExit {
  if [[ -f $1 ]]
  then
    rm $1
  fi
  exit $2
}

sumBin=$(which sum)
if [[ -z $sumBin || ! -f $sumBin ]]
then
  echo -e "You need to install a 'sum' tool."
  echo -e "If you have a sum tool installed, then fix your path, and try this again"
  exit 1
fi

if [[ -n $1 && -f $1 ]]
then
  rulesFile=$1
  rulesOkFile="$rulesFile.ok"
  rulesOkFileBackup="$rulesFile.ok.$$"
else
  echo -e "$1 doesn't exist, try again"
  echo -e "$USAGE"
  cleanExit "" 1
fi

if [[ -f $rulesOkFile ]]
then
  operation=$(cp $rulesOkFile $rulesOkFileBackup 2>&1) ||
  (echo -e "Can't make backup of $rulesOkFile:\n$operation" ; cleanExit 1)
fi

# Getting rid of some whitespace
sed 's/\s\s*/ /g; s/^\s\s*//g; /^#/d; /^$/d' $rulesFile > $rulesOkFileBackup

while read line
do
  if [[ $(echo "$line" | egrep '^probe') ]]
  then
    continue
  fi
  # Should be 5 words
  words=$(echo -e "$line" | wc -w)
  if [[ $words != 5 ]]
  then
    echo -e "The following line is invalid:"
    echo -e "$line"
    cleanExit $rulesOkFileBackup 1
  fi
done < $rulesOkFileBackup

sum=$(sum $rulesOkFile | awk '{print $1}')
echo -e "# version=2 checksum=$sum" >> $rulesOkFileBackup

mv $rulesOkFileBackup $rulesOkFile
