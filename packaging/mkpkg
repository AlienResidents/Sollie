#!/usr/local/bin/perl
#
#
# vim: set expandtab, set tabstop=2, set foldmethod=marker
#
#

use Cwd;
use strict;
use warnings;
use File::Basename;
use File::Compare;
use File::Copy;
use File::Path;
use Data::Dumper;

# Who said patience is a virtue?
$|=1;

# These are all global values
use vars qw(%request %preInstall %postInstall %pkg %tar %rm @bits $USAGE
  $baseDir $baseBuildDir $untarStatus $temp $badPerms $group $status $request
  $requestLocation $tar $preinstall $postinstall $name $package $cwd $rmBuildDir
  $user $count $requestName $arg $size $timestamp $tstamp $homeDir $siUnits
  $startDir
);

$USAGE = "
$0 -f <tarball>
$0 <directory>
";

if ($#ARGV lt 0) {
  die "$USAGE\n";
}

sub dirwalk { #{{{
  my $dir = shift;
  my @files;
  opendir(my $DIR, $dir) || die getcwd() . "\nCan't dirwalk $dir.\n$!\n";
  foreach my $file (readdir $DIR) {
    if ($file =~ m/^\.$/ || $file =~ m/^\.\.$/) {
      next;
    }
    if (-d "$dir/$file") {
      push(@files, dirwalk("$dir/$file"));
    } else {
      push(@files, "$dir/$file");
    }
  }
  return @files;
} #}}}
sub getScript { # {{{
  # Usage: getScript('request');
  my (%type, $hasScript, $scriptLocation, $scriptName);
  my $status = 0;
  my $type = shift;
  while (!$status) {
    print "Do you have a $type script? (y|n) [n]: ";
    chomp($hasScript = lc(substr(<STDIN>, 0, 1)));
    $hasScript = ($hasScript eq '') ? "n" : $hasScript;
    if ($hasScript ne "y" && $hasScript ne "n") {
      print "Your answer must be a \"y\" or an \"n\"!\n";
      $status = 0;
    } elsif ($hasScript eq "y") {
      print "What is the path to your $type script?: ";
      chomp($scriptLocation = <STDIN>);
      # Alter the $scriptLocation is not an absolute path
      if ($scriptLocation !~ m/^\//) {
        $scriptLocation = "$startDir/$scriptLocation";
      }
      $scriptName = basename($scriptLocation);
      chomp($scriptName);
      if (!-e $scriptLocation) {
        $status = 0;
        print "$scriptLocation does not exist!\n";
      } else {
        %type = (
          name => $scriptName,
          location => $scriptLocation,
        );
        $status = 1;
      }
    } elsif ($hasScript eq "" || $hasScript eq "n") {
      %type = (
        name => '',
      );
      $hasScript = "n";
      $status = 1;
    }
  }
  return %type;
} #}}}
sub getInfo { #{{{
  my $what = shift;
  my $type = shift;
  my $info;
  my $status = 0;
  while (!$status) {
    print "Please enter the $what for $pkg{name} []: ";
    chomp($info = <STDIN>);
    $status = 1;
    if ($info eq "") {
      print "$info can not be blank! Try again.\n";
      $status = 0;
    } elsif ($type eq 'e' && $info !~ m/[@]/ && $info !~ m/[\.]/) {
      print "$what must be an email address! Try again.\n";
      $status = 0;
    } elsif ($type eq 'i' && $info =~ m/[^0-9|^\.]/) {
      print "$what must be a integer / number! Try again.\n";
      $status = 0;
    }
  }
  return $info;
} #}}}

$startDir = getcwd();
$siUnits = 1000;
$pkg{info} = "pkginfo";
$pkg{make} = "/usr/sbin/pkgmk";
chomp($pkg{arch} = qx/uname -p/);
chomp($pkg{osver} = qx/uname -r/);
$rm{basedir} = 0;
$rm{basebuilddir} = 1;
$homeDir = "$ENV{HOME}";
$baseDir = "$homeDir/mkpkg";
if ($rm{basedir} == 1 && -d $baseDir) {
  print "* Removing an existing \$baseDir: $baseDir\n";
  rmtree($baseDir) || die "Can't remove $baseDir\n$!\n";
}

$arg = $ARGV[0];
$arg =~ s/\/$//;

if (-f $arg) {
  $tar{file} = $arg;
  $tar{method} = "tarball";
  $pkg{name} = basename($tar{file});
  if (compare($tar{file}, "$baseDir/" . basename($tar{file})) != 0) {
    mkpath $baseDir or die "The base directory \"$baseDir\" could not be made.\n$!\n";
    copy($tar{file}, "$baseDir/",) or die "1: Copy failed:\n$!\n";
  }
  $tar{file} = "$baseDir/" . basename($tar{file});
} elsif (-d $arg) {
  $tar{method} = "tardir";
  $tar{dir} = $arg;
  $tar{file} = "$baseDir/" . basename($tar{dir}) . ".tar.gz";
  $pkg{name} = basename($tar{dir});
} elsif (!-f $arg && !-d $arg) {
  die "$arg doesn't exist.\n";
}
$pkg{name} =~ s/-.*$//g;
$baseBuildDir = "$baseDir/$pkg{name}";
if (-d $baseBuildDir && $rm{basebuilddir} == 1) {
  print "* Removing an existing (old) \$baseBuildDir: $baseBuildDir\n";
  rmtree($baseBuildDir) || die "Can't remove $baseBuildDir\n$!\n";
}
mkpath $baseBuildDir or die "The temporary build directory \"$baseBuildDir\" could not be made.\n$!\n";

if ($tar{method} eq 'tardir') {
  chdir $tar{dir} || die "Can't change to $tar{dir}.\n$!\n";;
  chdir "../" || die "Can't change to '../'.\n$!\n";;
  my @files = dirwalk(basename($tar{dir}));
  system("tar -czf $tar{file} @files");
} elsif ($tar{method} eq 'tarfile') {
  chdir dirname($tar{file});
}

%request = getScript('request');
%preInstall = getScript('preinstall');
%postInstall = getScript('postinstall');

print "Using $pkg{name} for this package.\n";

$user = getpwuid($<);
$group = getgrgid($));

print "Temporary build directory is $baseBuildDir\n";
chdir $baseBuildDir;
print "\n* Extracting $tar{file} in $baseBuildDir:\n";
$status = system("tar -xzvf $tar{file}") && die "Couldn't extract $tar{file} in " . getcwd() . "\n$!\n";
print "* Extraction complete.\n\n";

#PKG = "BPFDmyf"
#NAME = "prog"
#ARCH = "sparc"
#VERSION = "1.2.3-4"
#CATEGORY = "application"
#VENDOR = "The Packaging Plan"
#EMAIL = "Packager@packaging.plant.com"
#PSTAMP = "Henry Rollins"
#BASEDIR = "/"
#CLASSES = "none"

$pkg{description} = getInfo('description', 's');
$pkg{version} = getInfo('version', 'i');
$pkg{maintainer} = getInfo('maintainer', 's');
$pkg{email} = getInfo('contact email', 'e');
$pkg{vendor} = getInfo('vendor', 's');
$pkg{basedir} = getInfo('base directory', 's');

$badPerms = system("find $baseBuildDir -type f -perm -2 > $homeDir/$pkg{name}.badPerms");
$badPerms .= system("find $baseBuildDir -type d -perm -2 > $homeDir/$pkg{name}.badPerms");
if (-s "$homeDir/$pkg{name}.badPerms") {
  print "\nThe following list of files have bad permissions.\n";
  print "The permissions for other(world) cannot be a value of 7,6, or 2.\n";
  print "Please fix your file permissions in $tar{file} and then try again.\n";
  system("find $baseBuildDir -type f -perm -2 -exec ls -l {} \\;");
  unlink "$homeDir/$pkg{name}.badPerms";
  exit;
} else {
  unlink "$homeDir/$pkg{name}.badPerms";
}

if (-d "$homeDir/tmp") {
  #system("find . -type +d -o -type l | pkgproto > $homeDir/tmp/tmp");
  system("find . | pkgproto > $homeDir/tmp/tmp");
  open(TMP, "<$homeDir/tmp/tmp");
} else {
  #system("find . -type +d -o -type l | pkgproto > $homeDir/tmp");
  system("find . | pkgproto > $homeDir/tmp");
  open(TMP, "<$homeDir/tmp");
}
open(PROTOTYPE, ">$baseBuildDir/prototype");
print PROTOTYPE "i pkginfo=$pkg{info}\n";
if ($request{name}) {
  system("cp $request{location} $baseBuildDir");
  print PROTOTYPE "i request=$request{location}\n";
}
if ($preInstall{name}) {
  system("cp $preInstall{location} $baseBuildDir");
  print PROTOTYPE "i preinstall=$preInstall{location}\n";
}
if ($postInstall{name}) {
  system("cp $postInstall{location} $baseBuildDir");
  print PROTOTYPE "i postinstall=$postInstall{location}\n";
}
while (<TMP>) {
  if ($_ !~ /^s|^l/) {
    if ($_ !~ "/^.*prototype.*$/" || $_ !~ "/^.*pkginfo.*$/") {
      print PROTOTYPE "$_";
    }
  } else {
    print PROTOTYPE "$_";
  }
}
close TMP;

if (-d "$homeDir/tmp") {
  unlink "$homeDir/tmp/tmp";
} else {
  unlink "$homeDir/tmp";
}
close PROTOTYPE;

#ARCH='$pkg{arch}'
open(my $PKGINFO, ">$baseBuildDir/$pkg{info}");
print $PKGINFO "PKG='$pkg{name}'
NAME='$pkg{description}'
VERSION='$pkg{version}'
CATEGORY='application'
VENDOR='$pkg{vendor}'
EMAIL='$pkg{email}'
PSTAMP='$pkg{maintainer}'
BASEDIR='$pkg{basedir}'
CLASSES='none'
";
close $PKGINFO;

print "Making $pkg{name} now...\n";
$status = system("pkgmk -d $baseBuildDir -r $baseBuildDir");
if ($status != "0") {
  print "The creation of $pkg{name} failed.\n";
  exit;
}

print "Translating package to data stream format...\n";
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year += 1900;
$mon += 1;
if (length($mon) == 1) {
  $mon = "0$mon"
}
if (length($mday) == 1) {
  $mday = "0$mday"
}
$timestamp = "$year$mon$mday";
print "What is the timestamp? [$timestamp]\n";
chomp($tstamp = <STDIN>);
if ($tstamp ne "") {
  $timestamp = $tstamp;
}
$package = "$baseDir/$pkg{name}-$pkg{arch}-sol$pkg{osver}-v$pkg{version}-$timestamp.pkg";
system("pkgtrans -s $baseBuildDir $package $pkg{name}");
$size = (lstat($package))[7];
$count = 0;
while ($size >= $siUnits) {
  $count++;
  $size = sprintf("%f", $size/$siUnits);
}
@bits = ("Bytes", "KB", "MB", "GB");

printf("$package is %.2f%s.\n", $size, $bits["$count"]);

print "\n";
