#!/usr/bin/perl

use Cwd;
use strict;
use warnings;

$|=1;

use vars qw($USAGE $baseDir $untarStatus $pkgVersion $pkgMaintainer
		$pkgEmail $pkgVendor $pkg_desc $temp $badPerms $pkgName $tar $pkgInfo
		$pkgmk $owner $group $rmDirDefault $status $request $request_location
		$preinstall $postinstall $name $package @bits $cwd $tarball $rmDir
		$count $requestName $preInstallLocation $preinstall_name pkgNamePrefix
		$postinstall_location $postinstall_name $user $timestamp $tstamp $homeDir
);

$USAGE="
$0 <tarball>

** Default answers are in brackets []
\n";

$tarball=shift || die "$USAGE";
open(my $TARFILE, "<$tarball") || die "Could not open $tarball\n$!\n";
my $tar_check=readline $TARFILE;
if ($tar_check !~ /ustar/) {
  close($TARFILE);
  die "This is not a tarball!!\n";
}
close($TARFILE);

print "\n";
my $pkgsize=0;
if (-f "/usr/local/bin/tar") {
  my $tar="/usr/local/bin/tar";
} elsif (-f "/usr/sfw/bin/gtar") {
  my $tar="/usr/sfw/bin/gtar";
} else {
  my $tar="/usr/bin/tar";
}
$pkgName="$tarball";
$pkgName=~s/^.*\///g;
$pkgName=~s/\.tar//g;
$pkgName=~s/^.*\/(.*?)[-|_].*$/$pkgNamePrefix$1/g;
$pkgName=~s/[-|_]//g;
$pkgInfo="pkgInfo";
$pkgmk="/usr/sbin/pkgmk";
$owner="root";
$group="bin";
$rmDirDefault="y";

$status="no";
while ($status ne "yes") {
  print "Do you have a request script? (y|n) [n]\t: ";
  chomp($request=<STDIN>);
  $request=~lc($request);
  if ($request ne "y" && "$request" ne "n" && "$request" ne "") {
    print "Your answer must be a \"y\" or an \"n\"!\n";
  } elsif ($request eq "y") {
    print "Where is your request script?: ";
    chomp($request_location=<STDIN>);
    $requestName=system("basename $request_location > /dev/null");
    chomp($requestName);
    if (!-e $request_location) {
      print "$request_location does not exist!\n";
    } else {
      $status="yes";
    }
  } elsif ($request eq "" || $request eq "n") {
    $request="n";
    $status="yes";
  }
}

$status="no";
while ($status ne "yes") {
  print "Do you have a preinstall script? (y|n) [n]\t: ";
  chomp($preinstall=<STDIN>);
  $preinstall=~lc($preinstall);
  if ($preinstall ne "y" && $preinstall ne "n" && $preinstall ne "") {
    print "Your answer must be a \"y\" or an \"n\"!\n";
  } elsif ($preinstall eq "y") {
    print "Where is your preinstall script?: ";
    chomp($preInstallLocation=<STDIN>);
    $preinstall_name=system("basename $preInstallLocation > /dev/null");
    chomp($preinstall_name);
    if (!-e $preInstallLocation) {
      print "$preInstallLocation does not exist!\n";
    } else {
      $status="yes";
    }
  } elsif ($preinstall eq "" || $preinstall eq "n") {
    $preinstall="n";
    $status="yes";
  }
}

$status="no";
while ($status ne "yes") {
  print "Do you have a postinstall script? (y|n) [n]\t: ";
  chomp($postinstall=<STDIN>);
  $postinstall=~lc($postinstall);
  if ($postinstall ne "y" && $postinstall ne "n" && $postinstall ne "") {
    print "Your answer must be a \"y\" or an \"n\"!\n";
  } elsif ($postinstall eq "y") {
    print "Where is your postinstall script?: ";
    chomp($postinstall_location=<STDIN>);
    $postinstall_name=system("basename $postinstall_location > /dev/null");
    chomp($postinstall_name);
    if (!-e $postinstall_location) {
      print "$postinstall_location does not exist!\n";
    } else {
      $status="yes";
    }
  } elsif ($postinstall eq "" || $postinstall eq "n") {
    $postinstall="n";
    $status="yes";
  }
}

$status="no";
while ($status ne "yes") {
  print "What is the name of your package? [$pkgName]\t: ";
  chomp($name=<STDIN>);
  if ($name ne "") {
    $pkgName=$name;
  }
  if ($name =~ /[_|-]/) {
    print "Your package name can NOT have underscores or hyphens! Try again.\n";
  } else {
    $status="yes";
  }
}

print "\n";
print "Please ensure that all permissions on your files in\n";
print "\"$tarball\" are correct.\n";
print "Press enter once this has been verified.\n";
chomp($temp=<STDIN>);

$user = getpwuid($<);
$group = getgrgid($));

$homeDir="$ENV{HOME}";
$baseDir="$homeDir/$pkgName";
if (!-d $baseDir) {
  mkdir $baseDir;
} elsif (-d $baseDir) {
  system("mv $baseDir $baseDir.`date '+%a-%b-%e-%T-%Z-%Y'`");
  mkdir $baseDir
}

print "Temporary build directory is $baseDir\n";
$cwd=getcwd();
chdir $baseDir || warn "The temporary build directory \"$baseDir\" could not be made.\n$!\n";
$untarStatus=system($tar xf $tarball);

#PKG="BPFDmyf"
#NAME="prog"
#ARCH="sparc"
#VERSION="1.2.3-4"
#CATEGORY="application"
#VENDOR="The Packaging Plan"
#EMAIL="Packager@packaging.plant.com"
#PSTAMP="Henry Rollins"
#BASEDIR="/"
#CLASSES="none"
while ($pkg_desc eq "") {
  print "Please enter a description of what $pkgName is for.\n";
  chomp($pkg_desc=<STDIN>);
  if ($pkg_desc eq "") {
    print "$pkgName needs a description! Try again.\n";
  }
}

while ($pkgVersion eq "") {
  print "What version is $pkgName?\n";
  chomp($pkgVersion=<STDIN>);
  if ($pkgVersion eq "") {
    print "$pkgName must have a version! Try again.\n";
  }
}

while ($pkgMaintainer eq "") {
  print "Who is the person responsible for maintaining this package?\n";
  chomp($pkgMaintainer=<STDIN>);
  if ($pkgMaintainer eq "") {
    print "Someone has to be responsible for $pkgName ! Try again.\n";
  }
}

while ($pkgEmail eq "") {
  print "What is ${pkgMaintainer}'s email address?\n";
  chomp($pkgEmail=<STDIN>);
  if ($pkgMaintainer eq "") {
    print "$pkgMaintainer has to have an email address ! Try again.\n";
  }
}

$badPerms=system("find $baseDir -type f -perm -2 > $homeDir/$pkgName.badPerms");
$badPerms.=system("find $baseDir -type d -perm -2 > $homeDir/$pkgName.badPerms");
if (-s "$homeDir/$pkgName.badPerms") {
  print "\nThe following list of files have bad permissions.\n";
  print "The permissions for other(world) cannot be a value of 7,6, or 2.\n";
  print "Please fix your file permissions in $tarball and then try again.\n";
  system("find $baseDir -type f -perm -2 -exec ls -l {} \\;");
  unlink "$homeDir/$pkgName.badPerms";
  exit;
} else {
  unlink "$homeDir/$pkgName.badPerms";
}

if (-d "$homeDir/tmp") {
  #system("find . -type +d -o -type l | pkgproto > $homeDir/tmp/tmp");
  system("find . | pkgproto > $homeDir/tmp/tmp");
  open(TMP, "<$homeDir/tmp/tmp");
} else {
  #system("find . -type +d -o -type l | pkgproto > $homeDir/tmp");
  system("find . | pkgproto > $homeDir/tmp");
  open(TMP, "<$homeDir/tmp");
}
open(PROTOTYPE, ">$baseDir/prototype");
print PROTOTYPE "i pkgInfo=./$pkgInfo\n";
if ($request eq "y") {
  system("cp $request_location $baseDir");
  print PROTOTYPE "i request=$request_location\n";
}
if ($preinstall eq "y") {
  system("cp $preInstallLocation $baseDir");
  print PROTOTYPE "i preinstall=$preInstallLocation\n";
}
if ($postinstall eq "y") {
  system("cp $postinstall_location $baseDir");
  print PROTOTYPE "i postinstall=$postinstall_location\n";
}
while (<TMP>) {
  if ($_ !~ /^s|^l/) {
#    $_=~s/[^ ]* [^ ]*$/$owner $group\n/g;
    if ($_ !~ "/^.*prototype.*$/" || $_ !~ "/^.*pkgInfo.*$/") {
      print PROTOTYPE "$_";
    }
  } else {
    print PROTOTYPE "$_";
  }
}
close TMP;
if (-d "$homeDir/tmp") {
  unlink "$homeDir/tmp/tmp";
} else {
  unlink "$homeDir/tmp";
}
close PROTOTYPE;

open(PKGINFO, ">$baseDir/$pkgInfo");
print PKGINFO "
PKG='$pkgName'
NAME='$pkg_desc'
ARCH='sparc'
VERSION='$pkgVersion'
CATEGORY='application'
VENDOR='$pkgVendor'
EMAIL='$pkgEmail'
PSTAMP='$pkgMaintainer'
BASEDIR='/'
CLASSES='none'
";
close PKGINFO;

print "Making $pkgName now...\n";
$status=system("pkgmk -d $baseDir -r $baseDir");
if ($status != "0") {
  print "The creation of $pkgName failed.\n";
  exit;
}

print "Translating package to data stream format...\n";
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
$year+=1900;
$mon+=1;
$timestamp="$year$mon$mday$hour$min";
print "What is the timestamp? [$timestamp]\n";
chomp($tstamp=<STDIN>);
if ($tstamp ne "") {
  $timestamp=$tstamp;
}
$package="$homeDir/$pkgName-sparc-sol9-v$pkgVersion-$timestamp.pkg";
system("pkgtrans -s $baseDir $package $pkgName");
my $size = (lstat($package))[7];
$count=0;
while ($size >= "1000") {
  $count++;
  $size=$size/1000;
}
@bits=("Bytes", "KB", "MB", "GB");

printf("$package is %.2f%s.\n", $size, $bits["$count"]);

chdir $cwd;
print "\nShould I remove the build directory $baseDir ? (y|n) [y] :";
chomp($rmDir=<STDIN>);
if ($rmDir ne "") {
  $rmDir = $rmDirDefault;
}
# Have to use a true operator on the next line because of the shell return code.
if ($rmDir ne "n") {
  system("rm -fr $baseDir") && print "$baseDir not deleted\n$!\n";;
}
print "\n";
