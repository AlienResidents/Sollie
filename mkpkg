#!/usr/local/bin/perl

use Cwd;
use strict;
use warnings;
use File::Basename;
use Archive::Tar;
use Data::Dumper;

# Who said patience is a virtue?
$|=1;

# These are all global values
use vars qw(%request %preInstall %postInstall @bits $USAGE $baseDir $untarStatus
    $pkgVersion $pkgMaintainer $pkgEmail $pkgVendor $pkgDescription $temp
    $badPerms $pkgName $pkgInfo $pkgMk $group $rmBaseBuildDir $status $request
    $requestLocation $tar $preinstall $postinstall $name $package $cwd $tardir
    $tarball $rmBuildDir $user $count $requestName $preInstallLocation
    $preInstallName $pkgNamePrefix $postInstallLocation $postInstallName
    $timestamp $tstamp $homeDir $pkgArch $siUnits $method
);

$USAGE = "
$0 <tarball>
";

if ($#ARGV lt 0) {
  die "$USAGE\n";
}

if (-f $ARGV[0]) {
  $tarball = $ARGV[0];
  $method = "tarball";
  $tar = Archive::Tar->new;
  $tar->read($tarball) or die "Couldn't read $tarball\n$!\n";
} elsif (-d $ARGV[0]) {
  $method = "tardir";
  $tardir = $ARGV[0];
}

print "What should the package name prefix be (no spaces)? eg:
CHRISopenssl
This would represent an openssl package that has the prefix of 'CHRIS'
";
chomp($pkgNamePrefix = <STDIN>);
if ($pkgNamePrefix =~ m/[^A-z|^0-9]/) {
  die "The package name prefix can only contain letters, or numbers\n";
}

$pkgName = basename($tarball);
$pkgName =~ s/-.*$//g;
$pkgInfo = "pkginfo";
$pkgMk = "/usr/sbin/pkgmk";
$rmBaseBuildDir = "y";

sub getScript {
  # Usage: getScript('request');
  my (%type, $hasScript, $scriptLocation, $scriptName);
  my $status = 0;
  my $type = shift;
  while (!$status) {
    print "Do you have a $type script? (y|n) [n]: ";
    $hasScript = lc(substr(<STDIN>, 0, 1));
    if ($hasScript ne "y" && $hasScript ne "n") {
      print "Your answer must be a \"y\" or an \"n\"!\n";
      $status = 0;
    } elsif ($hasScript eq "y") {
      print "What is the path to your $type script?: ";
      chomp($scriptLocation = <STDIN>);
      $scriptName = basename($scriptLocation);
      chomp($scriptName);
      if (!-e $scriptLocation) {
        $status = 0;
        print "$scriptLocation does not exist!\n";
      } else {
        %type = (
          location => $scriptLocation,
          name => $scriptName,
        );
        $status = 1;
      }
    } elsif ($hasScript eq "" || $hasScript eq "n") {
      $hasScript = "n";
      $status = 1;
    }
  }
  return %type;
}

%request = getScript('request');
%preInstall = getScript('preinstall');
%postInstall = getScript('postinstall');

print Dumper(\%request);
print Dumper(\%preInstall);
print Dumper(\%postInstall);
exit;

$status = "no";
while ($status ne "yes") {
  print "Do you have a preinstall script? (y|n) [n]: ";
  chomp($preinstall = <STDIN>);
  $preinstall =~ lc($preinstall);
  if ($preinstall ne "y" && $preinstall ne "n" && $preinstall ne "") {
    print "Your answer must be a \"y\" or an \"n\"!\n";
  } elsif ($preinstall eq "y") {
    print "Where is your preinstall script?: ";
    chomp($preInstallLocation = <STDIN>);
    $preInstallName = system("basename $preInstallLocation > /dev/null");
    chomp($preInstallName);
    if (!-e $preInstallLocation) {
      print "$preInstallLocation does not exist!\n";
    } else {
      $status = "yes";
    }
  } elsif ($preinstall eq "" || $preinstall eq "n") {
    $preinstall = "n";
    $status = "yes";
  }
}

$status = "no";
while ($status ne "yes") {
  print "Do you have a postinstall script? (y|n) [n]: ";
  chomp($postinstall = <STDIN>);
  $postinstall =~ lc($postinstall);
  if ($postinstall ne "y" && $postinstall ne "n" && $postinstall ne "") {
    print "Your answer must be a \"y\" or an \"n\"!\n";
  } elsif ($postinstall eq "y") {
    print "Where is your postinstall script?: ";
    chomp($postInstallLocation = <STDIN>);
    #$postInstallName = system("basename $postInstallLocation > /dev/null");
    $postInstallName = basename($postInstallLocation);
    chomp($postInstallName);
    if (!-e $postInstallLocation) {
      print "$postInstallLocation does not exist!\n";
    } else {
      $status = "yes";
    }
  } elsif ($postinstall eq "" || $postinstall eq "n") {
    $postinstall = "n";
    $status = "yes";
  }
}

$status = "no";
while ($status ne "yes") {
  print "What is the name of your package? [$pkgName]\t: ";
  chomp($name = <STDIN>);
  if ($name ne "") {
    $pkgName = $name;
  }
  if ($name =~ /[_|-]/) {
    print "Your package name can NOT have underscores or hyphens! Try again.\n";
  } else {
    $status = "yes";
  }
}

print "\n";
print "Please ensure that all permissions on your files in\n";
print "\"$tarball\" are correct.\n";
print "Press enter once this has been verified.\n";
chomp($temp = <STDIN>);

$user = getpwuid($<);
$group = getgrgid($));

$homeDir = "$ENV{HOME}";
$baseDir = "$homeDir/$pkgName";
if (!-d $baseDir) {
  mkdir $baseDir;
} elsif (-d $baseDir) {
  system("mv $baseDir $baseDir.`date '+%a-%b-%e-%T-%Z-%Y'`");
  mkdir $baseDir
}

print "Temporary build directory is $baseDir\n";
$cwd = getcwd();
chdir $baseDir || warn "The temporary build directory \"$baseDir\" could not be made.\n$!\n";
#$untarStatus = system("$tar $tarFlags $tarball");

#PKG = "BPFDmyf"
#NAME = "prog"
#ARCH = "sparc"
#VERSION = "1.2.3-4"
#CATEGORY = "application"
#VENDOR = "The Packaging Plan"
#EMAIL = "Packager@packaging.plant.com"
#PSTAMP = "Henry Rollins"
#BASEDIR = "/"
#CLASSES = "none"
while ($pkgDescription eq "") {
  print "Please enter a description of what $pkgName is for.\n";
  chomp($pkgDescription = <STDIN>);
  if ($pkgDescription eq "") {
    print "$pkgName needs a description! Try again.\n";
  }
}

while ($pkgVersion eq "") {
  print "What version is $pkgName?\n";
  chomp($pkgVersion = <STDIN>);
  if ($pkgVersion eq "") {
    print "$pkgName must have a version! Try again.\n";
  }
}

while ($pkgMaintainer eq "") {
  print "Who is the person responsible for maintaining this package?\n";
  chomp($pkgMaintainer = <STDIN>);
  if ($pkgMaintainer eq "") {
    print "Someone has to be responsible for $pkgName ! Try again.\n";
  }
}

while ($pkgEmail eq "") {
  print "What is ${pkgMaintainer}'s email address?\n";
  chomp($pkgEmail = <STDIN>);
  if ($pkgMaintainer eq "") {
    print "$pkgMaintainer has to have an email address ! Try again.\n";
  }
}

$badPerms = system("find $baseDir -type f -perm -2 > $homeDir/$pkgName.badPerms");
$badPerms .= system("find $baseDir -type d -perm -2 > $homeDir/$pkgName.badPerms");
if (-s "$homeDir/$pkgName.badPerms") {
  print "\nThe following list of files have bad permissions.\n";
  print "The permissions for other(world) cannot be a value of 7,6, or 2.\n";
  print "Please fix your file permissions in $tarball and then try again.\n";
  system("find $baseDir -type f -perm -2 -exec ls -l {} \\;");
  unlink "$homeDir/$pkgName.badPerms";
  exit;
} else {
  unlink "$homeDir/$pkgName.badPerms";
}

if (-d "$homeDir/tmp") {
  #system("find . -type +d -o -type l | pkgproto > $homeDir/tmp/tmp");
  system("find . | pkgproto > $homeDir/tmp/tmp");
  open(TMP, "<$homeDir/tmp/tmp");
} else {
  #system("find . -type +d -o -type l | pkgproto > $homeDir/tmp");
  system("find . | pkgproto > $homeDir/tmp");
  open(TMP, "<$homeDir/tmp");
}
open(PROTOTYPE, ">$baseDir/prototype");
print PROTOTYPE "i pkgInfo = ./$pkgInfo\n";
if ($request eq "y") {
  system("cp $requestLocation $baseDir");
  print PROTOTYPE "i request = $requestLocation\n";
}
if ($preinstall eq "y") {
  system("cp $preInstallLocation $baseDir");
  print PROTOTYPE "i preinstall = $preInstallLocation\n";
}
if ($postinstall eq "y") {
  system("cp $postInstallLocation $baseDir");
  print PROTOTYPE "i postinstall = $postInstallLocation\n";
}
while (<TMP>) {
  if ($_ !~ /^s|^l/) {
    if ($_ !~ "/^.*prototype.*$/" || $_ !~ "/^.*pkgInfo.*$/") {
      print PROTOTYPE "$_";
    }
  } else {
    print PROTOTYPE "$_";
  }
}
close TMP;

if (-d "$homeDir/tmp") {
  unlink "$homeDir/tmp/tmp";
} else {
  unlink "$homeDir/tmp";
}
close PROTOTYPE;

open(PKGINFO, ">$baseDir/$pkgInfo");
print PKGINFO "
PKG = '$pkgName'
NAME = '$pkgDescription'
ARCH = '$pkgArch'
VERSION = '$pkgVersion'
CATEGORY = 'application'
VENDOR = '$pkgVendor'
EMAIL = '$pkgEmail'
PSTAMP = '$pkgMaintainer'
BASEDIR = '/'
CLASSES = 'none'
";
close PKGINFO;

print "Making $pkgName now...\n";
$status = system("pkgmk -d $baseDir -r $baseDir");
if ($status != "0") {
  print "The creation of $pkgName failed.\n";
  exit;
}

print "Translating package to data stream format...\n";
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year += 1900;
$mon += 1;
$timestamp = "$year$mon$mday$hour$min";
print "What is the timestamp? [$timestamp]\n";
chomp($tstamp = <STDIN>);
if ($tstamp ne "") {
  $timestamp = $tstamp;
}
$package = "$homeDir/$pkgName-sparc-sol9-v$pkgVersion-$timestamp.pkg";
system("pkgtrans -s $baseDir $package $pkgName");
my $size = (lstat($package))[7];
$count = 0;
while ($size >= $siUnits) {
  $count++;
  $size = $size/$siUnits;
}
@bits = ("Bytes", "KB", "MB", "GB");

printf("$package is %.2f%s.\n", $size, $bits["$count"]);

chdir $cwd;
print "\nShould I remove the build directory $baseDir ? (y|n) [y] :";
$rmBuildDir = substr(<STDIN>, 1, 1);
if ($rmBuildDir ne "") {
  $rmBuildDir = $rmBaseBuildDir;
}
if ($rmBuildDir ne "n") {
  system("rm -fr $baseDir") && print "$baseDir not deleted\n$!\n";;
}
print "\n";
