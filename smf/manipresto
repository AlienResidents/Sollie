#!/usr/bin/env perl
#
# This script runs on any OS with XML::Writer installed.
# This script is made for the Solaris 10 <= operating systems.
# This makes basic SMF XML manifest files for import by `svccfg import`.
# This does _not_ take into account your actual start / stop script being
# in place, that's still your responsibility.  I would recommend running
# this script from a postinstall, or at the very least, svccfg import'ing
# the file in a postinstall stage / script.
#


use warnings;
use strict;
use IO::File;
use XML::Writer;
use Getopt::Long;
use Pod::Usage;
use File::Basename;
$| = 1;

# The scope for most variables is going to be global, so we use the 'vars'
# pragma.
use vars qw(@dependencies @vars $help $outputFile $output $writer $svcName
            $force $svcUser $svcGroup $rcScript $svcCommonName);

GetOptions('help|?' => \$help,
           'force|f' => \$force,
           'file:s' => \$outputFile,
           'name:s' => \$svcName,
           'user:s' => \$svcUser,
           'group:s' => \$svcGroup,
           'startstop:s' => \$rcScript,
           'var:s' => \@vars,
           'dep:s' => \@dependencies,
          );

pod2usage(1) if $help;
pod2usage(-exitstatus => 1, -verbose => 2) if !$outputFile or
                                              !$svcName or
                                              !$svcUser or
                                              !$svcGroup or
                                              !$rcScript;

# It's not a good thing to be like The Thing and start clobbering files,
# so we'll just exit, and tell them how to do things.
if (-f $outputFile && !$force) {
  print "$outputFile already exists, use the --force to overwrite.\n";
  exit 0;
}

$svcCommonName = ucfirst($svcName);
$output = IO::File->new($outputFile, "+>") or
  die "Can't open $outputFile:\n$!\n";
$writer = new XML::Writer(DATA_MODE => 'true',
                          DATA_INDENT => 2,
                          OUTPUT => $output);
$writer->xmlDecl();
print $output "<!DOCTYPE service_bundle SYSTEM ";
print $output "\"/usr/share/lib/xml/dtd/service_bundle.dtd.1\">";
#$writer->startTag("service_bundle", type => "manifest", name => "$svcName");
$writer->startTag("service_bundle", type => "manifest", name => basename($svcName));
  $writer->startTag("service",
                    name => "site/$svcName",
                    type => "service",
                    version => "1");
    $writer->emptyTag("create_default_instance",
                      enabled => "false");
    $writer->emptyTag("single_instance");
    if (@dependencies) {
      for my $dep (@dependencies) {
        my $depName = $dep;
        $depName =~ s/^.*\/(\w*):.*$/$1/g;
        $writer->startTag("dependency",
                          name => "$depName",
                          grouping => "require_all",
                          restart_on => "error",
                          type => "service");
        $writer->emptyTag("service_fmri",
                          value => "$dep");
        $writer->endTag("dependency");
      }
    }

      $writer->startTag("exec_method",
                        type => "method",
                        name => "start",
                        exec => "$rcScript %m",
                        timeout_seconds => "60");
        $writer->startTag("method_context");
          $writer->emptyTag("method_credential",
                            user => "$svcUser",
                            group => "$svcGroup");
          $writer->startTag("method_environment");
            if (@vars) {
              foreach my $var (@vars) {
                (my $var, my $value) = split(/::/, $var);
                $writer->emptyTag("envvar",
                                  name => "$var",
                                  value => "$value");
              }
            }
          $writer->endTag("method_environment");
        $writer->endTag("method_context");
      $writer->endTag("exec_method");

      $writer->startTag("exec_method",
                        type => "method",
                        name => "stop",
                        exec => "$rcScript %m",
                        timeout_seconds => "60");
        $writer->startTag("method_context");
          $writer->emptyTag("method_credential",
                              user => "$svcUser",
                              group => "$svcGroup");
          $writer->startTag("method_environment");
            if (@vars) {
              foreach my $var (@vars) {
                (my $var, my $value) = split(/::/, $var);
                $writer->emptyTag("envvar",
                                  name => "$var",
                                  value => "$value");
              }
            }
          $writer->endTag("method_environment");
        $writer->endTag("method_context");
      $writer->endTag("exec_method");

      $writer->startTag("property_group",
                        name => "startd",
                        type => "framework");
        $writer->emptyTag("propval",
                          name => "duration",
                          type => "astring",
                          value => "contract");
        $writer->emptyTag("propval",
                          name => "ignore_error",
                          type => "astring",
                          value => "core,signal");
      $writer->endTag("property_group");
      $writer->startTag("property_group",
                        name => "application",
                        type => "application");
      $writer->endTag("property_group");
    $writer->emptyTag("stability",
                       value => "Evolving");
    $writer->startTag("template");
      $writer->startTag("common_name");
        $writer->startTag("loctext",
                           "xml:lang" => "C");
          $writer->characters("$svcCommonName");
        $writer->endTag("loctext");
      $writer->endTag("common_name");
    $writer->endTag("template");
  $writer->endTag("service");
$writer->endTag("service_bundle");
$writer->end();

seek($output, 0, SEEK_SET);
print <$output>;
close($output);

__END__
=head1 NAME

manipresto - Create a suitable SMF specification document.

=head1 SYNOPSIS

manipresto --name <service name> --user <user> --group <group>
--file <filename> --startstop <start / stop script>
--dep FMRI
--dep FMRI
--var port::31337
--var port::5432

=head1 OPTIONS

=over 8

=item B<--help>
Print a brief help message and exits.

=item B<--force | -f>
Force writing to existing file.

=item B<--file>
Where to store this configuration (appended with .xml)

=item B<--name>
The name of the service

=item B<--user>
The user that this service runs as

=item B<--group>
The group that this service runs as

=item B<--dep>
The dependency FMRIs required to start before this service

=item B<--var>
This allows you to set environment variables during the execution of the start /
 stop script.  The format is var_name::value.  Very important to have the '::', 
as the '::' is the separator for the variable and value.

=item B<--startstop>
The start / stop script used to control this service

=back

=head1 DESCRIPTION

B<manipresto> will attempt to create a very basic SMF XML document
 suitable for use with `svccfg import`.

=head1 EXAMPLES

manipresto --name RPapache2 --user www --group www
--file /lib/svc/manifest/network --startstop /var/svc/method/RPapache2
--dep svc:/milestone/network:default --var port::80 -var port::443
--dep svc:/system/cron:default -f

=cut
